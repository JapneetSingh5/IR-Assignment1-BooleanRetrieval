26/8

1. Indexing is pretty slow right now, lets look for possible bottlenecks and benchmark:

Time taken to index 20 files using C1 as is 
(commmit made on morning on 26th): 20s
Time taken to index 20 files using C1 with 'lxml' instead of 'xml' in bs4 : <20s 

Time taken to index all 686 files using C1 as is ('xml' + bs4)
(commmit made on morning on 26th): takes 15min10s
Time taken to index all 686 files using C1 with 'lxml' instead of 'xml' in bs4 : 14min 10s 

-> Speed up factor: use lxml instead of xml, why does this work better? FIND OUT

2. Parsing : https://towardsdatascience.com/how-to-efficiently-remove-punctuations-from-a-string-899ad4a059fb

re based method works really slow wrt translate, possible efficiency boost.

-> Attempted, made no significant difference

3. I am sorting the directory list, is it really required?

With sorting + lxml : 14min10s
Without sort + lxml: 12min22s
Are results still the same? (Should be, but still good to check) almost :(
-> Speed up factor: don't sort directory list, are results reqd to be sorted? FIND OUT

28/8

C0 Indexing Time: 736.2504279613495 seconds
C0 Query Time: 2.8227379322052 seconds

C1 Indexing Time: 875.4889481067657 seconds
C1 Query Time: 4.794052839279175 seconds

C2 Indexing Time: 925.1772983074188 seconds
C2 Query Time: 11.153223752975464 seconds

Switching to a block merge method 

29/8

Speed Bottlenecks - Instead of concatenating and writing the whole thing as one, write it one by one
Possible in schemes C1, C3 can be optimised further too -> Find bottlenecks, write report

----------------------------------------------------------------

748.5985097885132  C0I (29/8 ~6PM)
2.8050239086151123 C0Q

734.5990040302277  C0I (30/8 ~1AM) Block Size 300
3.2839322090148926 C0Q
2.843123197555542  C0Q
2.8754849433898926 C0Q
2.941880702972412  C0Q
3.2271318435668945 C0Q

705.881560087204
3.0106749534606934
2.957406759262085

SIZES
C0 Full Index 101.3MB
C0 Full Dict    8.5MB

----------------------------------------------------------------

885.7165219783783 C1I | Intital run with sub_index written as string, changed to sub_index written as binary
9.115853071212769 C1Q | Next, rewritten s.t. no translation/encoded required while writing to destFile 

781.5222561359406 C1I (29/8 ~6PM)
4.796464920043945 C1Q

819.5955681800842 C1I (30/8 ~1AM) Block Size 300
5.030918121337891 C1Q
4.856018304824829 C1Q

699.8867132663727
4.599591255187988

SIZES
C1 Full Index  46.1MB
C1 Full Dict    8.3MB

----------------------------------------------------------------

872.7786040306091 C2I (30/8 ~1AM) Block Size 300
10.078965902328491 C2Q
10.858813762664795 C2Q
11.52536416053772  C2Q

806.9388651847839
11.228931903839111
11.261415958404541

SIZES
C2 Full Index  36.3MB
C2 Full Dict    8.3MB

----------------------------------------------------------------

713.8030400276184 C3I (30/8 ~1AM) Block Size 300
3.6472651958465576 C3Q
3.0475640296936035 C3Q


747.5186021327972
3.0581717491149902

SIZES
C3 Full Index  64.0MB
C3 Full Dict    8.3MB

----------------------------------------------------------------



